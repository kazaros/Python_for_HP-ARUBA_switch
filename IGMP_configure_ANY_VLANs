from netmiko import ConnectHandler
import re

TARGET_VLANS = {'40', '42', '501', '260'}  # Added your VLANs

def get_switch_model(net_connect):
    try:
        sys_info = net_connect.send_command("show system")
        if '6000' in sys_info or '6200' in sys_info or '6300' in sys_info:
            model = re.search(r'\b(6[023]00[MM]?)\b', sys_info)
            return model.group(1) if model else '6000'
        
        lldp_info = net_connect.send_command("show lldp info local-device")
        
        model_match = re.search(
            r'(?:ProCurve|HP|HPE).*?(2510[AB]?-\d+|2530-\d+|2510\b|2530\b)', 
            lldp_info,
            re.IGNORECASE
        )
        
        if model_match:
            base_model = re.search(r'25[13]0', model_match.group(1))
            return base_model.group(0) if base_model else 'UNKNOWN'
        return 'UNKNOWN'
        
    except Exception as e:
        print(f"Model detection error: {str(e)}")
        return 'UNKNOWN'

def parse_vlans(vlan_output, model):
    found_vlans = set()
    try:
        for line in vlan_output.split('\n'):
            if match := re.match(r'^\s*(\d+)\s+\S+', line):
                vlan_id = match.group(1)
                if vlan_id in TARGET_VLANS:
                    found_vlans.add(vlan_id)
    except Exception as e:
        print(f"VLAN parsing error: {str(e)}")
    return sorted(found_vlans, key=int)  # Numeric sort

def generate_config_commands(found_vlans, model):
    """Generate appropriate config commands based on model"""
    config_commands = ['configure terminal']
    if model.startswith('25'):  # Aruba 2530
        for vlan in found_vlans:
            config_commands.extend([
                f"vlan {vlan}",
                "ip igmp",
                "no ip igmp querier",
                "exit"
            ])
    else:  # Aruba 6000
        for vlan in found_vlans:
            config_commands.extend([
                f"vlan {vlan}",
                "ip igmp snooping enable",
                "ip igmp snooping version 2",
                "exit"
            ])
    config_commands.append("write memory")
    return config_commands

def process_device(device_ip):
    """Handle connection and configuration for a single device"""
    try:
        device_params = {
            'device_type': 'hp_procurve',
            'ip': device_ip,
            'username': 'admin',
            'password': 'password',
            'timeout': 45,
            'fast_cli': False,
#            'session_log': f'{device_ip}_session.log',
            'global_delay_factor': 2,
        }
        
        print(f"Connecting to {device_ip}...")
        with ConnectHandler(**device_params) as conn:
            conn.find_prompt()  # Ensure prompt is detected
            
            model = get_switch_model(conn)
            print(f"{device_ip} > Model: {model}")
            
            vlan_output = conn.send_command("show vlan", delay_factor=2)
            found_vlans = parse_vlans(vlan_output, model)
            
            if found_vlans:
                print(f"Target VLANs found: {', '.join(found_vlans)}")
                commands = generate_config_commands(found_vlans, model)
                print('\n'.join(commands))
                
                # Uncomment to apply configuration
                # conn.send_config_set(commands)
            else:
                print("No target VLANs found")
                
    except Exception as e:
        print(f"Error processing {device_ip}: {str(e)}")

# Main execution
with open("/home/sysprep/NETWORK_HP/iplist") as f:
    devices_list = f.read().splitlines()

for ip in devices_list:
    process_device(ip)
